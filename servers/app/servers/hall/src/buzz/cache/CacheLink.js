////////////////////////////////////////
// CacheLink
// 连接相关数据缓存
//--------------------------------------
// 如何使用
// var CacheLink = require('src/buzz/cache/CacheLink');
// CacheLink.func();
////////////////////////////////////////

//==============================================================================
// import
//==============================================================================
// var StringUtil = require('../StringUtil');
// var DaoLink = require('../../dao/dao_link');


//==============================================================================
// constant
//==============================================================================
var ERROR = 1;
var DEBUG = 0;


//==============================================================================
// global variable
//==============================================================================
// 使用说明: 定时存储记录, 存储时用队列方式
// 记录下当前长度len, 从队列中移除len个数据存入数据库, 等待下个周期
// 每一条记录格式如下
/**
link = 
{
    uid: bigint,
    linked_at: timestamp,
    api: api_flag from api_map,
}
 */
var gLinkLogCache = [];


//==============================================================================
// public
//==============================================================================

//------------------------------------------------------------------------------
// definition
//------------------------------------------------------------------------------
// 缓存连接日志相关
exports.push = push;
exports.cache = cache;
exports.length = length;

/**
 * 需要记录连接记录则设置为1, 否则设置为0.
 */
var RECORD_LINK = 1;
exports.RECORD_LINK = RECORD_LINK;


//------------------------------------------------------------------------------
// implement
//------------------------------------------------------------------------------

/**
 * 检测gLinkLogCache长度, 超过11000条数据时将前面的10000条写入数据库中
 */
function push(data) {
    if (RECORD_LINK) {
        gLinkLogCache.push(data);
    }
}

/**
 * 将gLinkLogCache全部写入数据库中
 */
function cache() {
    return gLinkLogCache;
}

/**
 * 将gLinkLogCache全部写入数据库中
 */
function length() {
    return gLinkLogCache.length;
}

